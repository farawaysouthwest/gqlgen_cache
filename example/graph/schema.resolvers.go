package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.55

import (
	"context"
	"fmt"
	"math/rand"
	"time"

	"github.com/farawaysouthwest/gqlgen_cache/example/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	// delay to simulate a slow query

	todos := []*model.Todo{
		{
			ID:   "1",
			Done: false,
		},
		{
			ID:   "2",
			Done: true,
		},
	}

	return todos, nil
}

// Text is the resolver for the text field.
func (r *todoResolver) Text(ctx context.Context, obj *model.Todo) (string, error) {
	time.Sleep(2 * time.Second)

	return fmt.Sprint("todo text", rand.Int()), nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
